name: "Release"
on:
  workflow_call:
defaults:
  run:
    shell: bash
permissions:
  contents: write
  packages: write
env:
  CI: true
  HUSKY: 0

jobs:
  release-node:
    name: "Semantic Release"
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.set-version.outputs.RELEASE_VERSION }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          # Semantic release needs at lease Node 18
          node-version: 20
          cache: "pnpm"

      - name: "Obtain Github App token"
        id: app-token
        uses: getsentry/action-github-app-token@v3
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_APP_PRIVATE_KEY }}

      - name: "Clean install dependencies"
        run: pnpm install --frozen-lockfile

      - name: "Run pnpm build"
        run: pnpm build

      - name: "Execute Semantic Release"
        run: pnpm release
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Set release version number
        id: set-version
        run: |
          RELEASE_VERSION=$( git describe --tags "${{ github.sha }}")
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> "$GITHUB_OUTPUT"

  release-docker:
    name: "Release Docker image"
    runs-on: ubuntu-latest
    needs: release-node
    if: ${{ ( github.ref_name == 'main' ) }}
    environment: 
      name: production
      url: https://remote-mcp.cheqd.io
    env:
      IMAGE_NAME: ${{ github.repository }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      FIREWALL_ID: ${{ secrets.FIREWALL_ID }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx
        with:
          install: true
          version: latest

      - name: Install DigitalOcean CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Login to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Docker image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release-node.outputs.RELEASE_VERSION }}
            type=raw,value=production-latest
            type=sha,format=long
          labels: |
            org.opencontainers.image.description="Cheqd MCP Toolkit"
            org.opencontainers.image.source="https://github.com/cheqd/mcp-toolkit"
            org.opencontainers.image.vendor="Cheqd Foundation Limited"
            org.opencontainers.image.created={{date 'dddd, MMMM Do YYYY, h:mm:ss a'}}
            org.opencontainers.image.documentation="https://docs.cheqd.io/identity"
      
      - name: Build image with labels
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64
          load: true
          target: runner
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=min
      
      - name: Push image to GitHub Container Registry
        run: docker image push --all-tags ghcr.io/${{ env.IMAGE_NAME }}

      - name: Set up SSH key
        run: |
          mkdir -p "$GITHUB_WORKSPACE/.ssh"
          echo "${{ env.SSH_PRIVATE_KEY }}" > "$GITHUB_WORKSPACE/.ssh/id_rsa"
          chmod 600 "$GITHUB_WORKSPACE/.ssh/id_rsa"
          ssh-keyscan -H "${{ env.SERVER_IP }}" >> "$GITHUB_WORKSPACE/.ssh/known_hosts"
      
      - name: Open firewall for deployment execution
        run: doctl compute firewall add-rules ${{ env.FIREWALL_ID }} --inbound-rules "protocol:tcp,ports:22,address:0.0.0.0/0"

      - name: SSH into server and pull new image
        run: |
          ssh -o StrictHostKeyChecking=no -i "$GITHUB_WORKSPACE/.ssh/id_rsa" root@${{ env.SERVER_IP }} <<EOF
          cd mcp-toolkit/
          docker-compose pull
          docker-compose down
          docker-compose up -d
          EOF

      - name: Close firewall after deployment execution
        run: doctl compute firewall remove-rules ${{ env.FIREWALL_ID }} --inbound-rules "protocol:tcp,ports:22,address:0.0.0.0/0"
